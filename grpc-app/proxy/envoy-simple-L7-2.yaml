static_resources:
  listeners: # Define listeners that Envoy will use to accept connections
    - name: listener_0 # Name of the listener, can be any descriptive name
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901 # Port on which Envoy will listen for incoming connections (e.g., 9901)
          
      filter_chains: # Define filter chains to process incoming connections
        - filters: # List of filters applied to the connection
            - name: envoy.filters.network.http_connection_manager # HTTP connection manager filter - handles HTTP requests
              typed_config: # Configuration specific to the HTTP connection manager filter
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_grpc
                codec_type: AUTO # Automatically detect HTTP version (supports both HTTP/1 and HTTP/2) - important for gRPC which uses HTTP/2
                route_config: # Configure how HTTP requests are routed
                  name: local_route
                  virtual_hosts: # Define virtual hosts - allows routing based on domain/host
                    - name: local_service # Name of the virtual host
                      domains: ["*"] # Domains this virtual host matches - "*" means match all domains (for simplicity in this example)
                      routes: # Define routes within this virtual host to handle requests
                        - match: # Define matching criteria for requests
                            prefix: "/" # Match requests with any prefix ("/" means all requests will match)
                          route: # Define the action to take when a request matches
                            cluster: grpc_service_cluster_all_backend # Route the request to the upstream cluster named 'grpc_service_cluster'
                            timeout: 0s # Set timeout for the route - 0s means infinite timeout (be careful in production, consider setting appropriate timeouts)

                http_filters: # HTTP filters applied to requests within the HTTP connection manager - executed in order
                  - name: envoy.filters.http.grpc_stats # gRPC statistics filter - collects metrics about gRPC calls
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
                      emit_filter_state: true # Optional: to emit filter state metrics, which can be used for more detailed monitoring

                  # Route filter is essential and must be the last filter in http_filters. It performs the actual routing.
                  - name: envoy.filters.http.router # Router filter - responsible for actually routing the request based on route_config
                    typed_config: # Configuration specific to the router filter
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

                access_log: # Configure access logging for this HTTP connection manager
                  - name: envoy.access_loggers.stdout # Use the stdout access logger to log to standard output
                    typed_config: # Configuration for the stdout access logger
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog

  clusters: # Define upstream clusters that Envoy can forward traffic to
    - name: grpc_service_cluster_all_backend # Name of the cluster, must match the cluster name used in routes
      connect_timeout: 0.25s # Timeout for establishing a new connection to an upstream host (0.25 seconds in this case)
      type: STRICT_DNS # Cluster type - LOGICAL_DNS resolves DNS names dynamically
      dns_lookup_family: V4_ONLY # DNS lookup family - V4_ONLY means only resolve IPv4 addresses
      lb_policy: ROUND_ROBIN # Load balancing policy - ROUND_ROBIN distributes requests evenly across endpoints
      http2_protocol_options: {} # HTTP/2 protocol options - required for gRPC to use HTTP/2, keep it empty for default HTTP/2 settings
      load_assignment:
        cluster_name: grpc_service_cluster_all_backend # Must match the cluster name
        endpoints: # Define the endpoints (upstream services) for this cluster
          - lb_endpoints: # List of load balancer endpoints
              - endpoint: # Define a single endpoint
                  address: # Address of the endpoint
                    socket_address:
                      address: 0.0.0.0 # Address of the gRPC service - in this example, it's set to 0.0.0.0, which might refer to localhost within a container or the same host. In a real setup, use the actual IP or hostname of your gRPC service. Consider changing to 127.0.0.1 or localhost if the service is on the same machine.
                      port_value: 50051 # Port on which the gRPC service is running (e.g., 50051)
              - endpoint: # Define a single endpoint
                  address: # Address of the endpoint
                    socket_address:
                      address: 0.0.0.0 # Address of the gRPC service - in this example, it's set to 0.0.0.0, which might refer to localhost within a container or the same host. In a real setup, use the actual IP or hostname of your gRPC service. Consider changing to 127.0.0.1 or localhost if the service is on the same machine.
                      port_value: 50052 # Port on which the gRPC service is running (e.g., 50052)
              - endpoint: # Define a single endpoint
                  address: # Address of the endpoint
                    socket_address:
                      address: 0.0.0.0 # Address of the gRPC service - in this example, it's set to 0.0.0.0, which might refer to localhost within a container or the same host. In a real setup, use the actual IP or hostname of your gRPC service. Consider changing to 127.0.0.1 or localhost if the service is on the same machine.
                      port_value: 50053 # Port on which the gRPC service is running (e.g., 50053)
