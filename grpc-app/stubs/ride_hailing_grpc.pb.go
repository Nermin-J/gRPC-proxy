// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: ride_hailing.proto

package ridehailing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RideService_RequestRide_FullMethodName          = "/ridehailing.RideService/RequestRide"
	RideService_StreamDriverLocation_FullMethodName = "/ridehailing.RideService/StreamDriverLocation"
	RideService_UpdateDriverLocation_FullMethodName = "/ridehailing.RideService/UpdateDriverLocation"
	RideService_CompleteRide_FullMethodName         = "/ridehailing.RideService/CompleteRide"
)

// RideServiceClient is the client API for RideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RideServiceClient interface {
	// User requests a ride
	RequestRide(ctx context.Context, in *RideRequest, opts ...grpc.CallOption) (*RideResponse, error)
	// Stream driver's location to the user
	StreamDriverLocation(ctx context.Context, in *DriverLocationRequest, opts ...grpc.CallOption) (RideService_StreamDriverLocationClient, error)
	// Driver sends continuous location updates
	UpdateDriverLocation(ctx context.Context, opts ...grpc.CallOption) (RideService_UpdateDriverLocationClient, error)
	// End the ride and process payment
	CompleteRide(ctx context.Context, in *RideCompletionRequest, opts ...grpc.CallOption) (*RideCompletionResponse, error)
}

type rideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRideServiceClient(cc grpc.ClientConnInterface) RideServiceClient {
	return &rideServiceClient{cc}
}

func (c *rideServiceClient) RequestRide(ctx context.Context, in *RideRequest, opts ...grpc.CallOption) (*RideResponse, error) {
	out := new(RideResponse)
	err := c.cc.Invoke(ctx, RideService_RequestRide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideServiceClient) StreamDriverLocation(ctx context.Context, in *DriverLocationRequest, opts ...grpc.CallOption) (RideService_StreamDriverLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &RideService_ServiceDesc.Streams[0], RideService_StreamDriverLocation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rideServiceStreamDriverLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RideService_StreamDriverLocationClient interface {
	Recv() (*DriverLocation, error)
	grpc.ClientStream
}

type rideServiceStreamDriverLocationClient struct {
	grpc.ClientStream
}

func (x *rideServiceStreamDriverLocationClient) Recv() (*DriverLocation, error) {
	m := new(DriverLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rideServiceClient) UpdateDriverLocation(ctx context.Context, opts ...grpc.CallOption) (RideService_UpdateDriverLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &RideService_ServiceDesc.Streams[1], RideService_UpdateDriverLocation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rideServiceUpdateDriverLocationClient{stream}
	return x, nil
}

type RideService_UpdateDriverLocationClient interface {
	Send(*DriverLocation) error
	CloseAndRecv() (*LocationUpdateResponse, error)
	grpc.ClientStream
}

type rideServiceUpdateDriverLocationClient struct {
	grpc.ClientStream
}

func (x *rideServiceUpdateDriverLocationClient) Send(m *DriverLocation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rideServiceUpdateDriverLocationClient) CloseAndRecv() (*LocationUpdateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LocationUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rideServiceClient) CompleteRide(ctx context.Context, in *RideCompletionRequest, opts ...grpc.CallOption) (*RideCompletionResponse, error) {
	out := new(RideCompletionResponse)
	err := c.cc.Invoke(ctx, RideService_CompleteRide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RideServiceServer is the server API for RideService service.
// All implementations must embed UnimplementedRideServiceServer
// for forward compatibility
type RideServiceServer interface {
	// User requests a ride
	RequestRide(context.Context, *RideRequest) (*RideResponse, error)
	// Stream driver's location to the user
	StreamDriverLocation(*DriverLocationRequest, RideService_StreamDriverLocationServer) error
	// Driver sends continuous location updates
	UpdateDriverLocation(RideService_UpdateDriverLocationServer) error
	// End the ride and process payment
	CompleteRide(context.Context, *RideCompletionRequest) (*RideCompletionResponse, error)
	mustEmbedUnimplementedRideServiceServer()
}

// UnimplementedRideServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRideServiceServer struct {
}

func (UnimplementedRideServiceServer) RequestRide(context.Context, *RideRequest) (*RideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRide not implemented")
}
func (UnimplementedRideServiceServer) StreamDriverLocation(*DriverLocationRequest, RideService_StreamDriverLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDriverLocation not implemented")
}
func (UnimplementedRideServiceServer) UpdateDriverLocation(RideService_UpdateDriverLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateDriverLocation not implemented")
}
func (UnimplementedRideServiceServer) CompleteRide(context.Context, *RideCompletionRequest) (*RideCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRide not implemented")
}
func (UnimplementedRideServiceServer) mustEmbedUnimplementedRideServiceServer() {}

// UnsafeRideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RideServiceServer will
// result in compilation errors.
type UnsafeRideServiceServer interface {
	mustEmbedUnimplementedRideServiceServer()
}

func RegisterRideServiceServer(s grpc.ServiceRegistrar, srv RideServiceServer) {
	s.RegisterService(&RideService_ServiceDesc, srv)
}

func _RideService_RequestRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).RequestRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RideService_RequestRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).RequestRide(ctx, req.(*RideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideService_StreamDriverLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DriverLocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RideServiceServer).StreamDriverLocation(m, &rideServiceStreamDriverLocationServer{stream})
}

type RideService_StreamDriverLocationServer interface {
	Send(*DriverLocation) error
	grpc.ServerStream
}

type rideServiceStreamDriverLocationServer struct {
	grpc.ServerStream
}

func (x *rideServiceStreamDriverLocationServer) Send(m *DriverLocation) error {
	return x.ServerStream.SendMsg(m)
}

func _RideService_UpdateDriverLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RideServiceServer).UpdateDriverLocation(&rideServiceUpdateDriverLocationServer{stream})
}

type RideService_UpdateDriverLocationServer interface {
	SendAndClose(*LocationUpdateResponse) error
	Recv() (*DriverLocation, error)
	grpc.ServerStream
}

type rideServiceUpdateDriverLocationServer struct {
	grpc.ServerStream
}

func (x *rideServiceUpdateDriverLocationServer) SendAndClose(m *LocationUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rideServiceUpdateDriverLocationServer) Recv() (*DriverLocation, error) {
	m := new(DriverLocation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RideService_CompleteRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).CompleteRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RideService_CompleteRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).CompleteRide(ctx, req.(*RideCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RideService_ServiceDesc is the grpc.ServiceDesc for RideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ridehailing.RideService",
	HandlerType: (*RideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRide",
			Handler:    _RideService_RequestRide_Handler,
		},
		{
			MethodName: "CompleteRide",
			Handler:    _RideService_CompleteRide_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDriverLocation",
			Handler:       _RideService_StreamDriverLocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateDriverLocation",
			Handler:       _RideService_UpdateDriverLocation_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ride_hailing.proto",
}
